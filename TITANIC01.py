# -*- coding: utf-8 -*-
"""TITANIC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HarhCkc-XusFM1REngiugBzTrl329mbq
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('Titanic-Dataset.csv')

df.head()

df.tail()

df.sample(8)

df.shape

df.columns

df.dtypes

df.isnull()

df.isnull().any()

df.isnull().sum()

df.info()

df.duplicated()

df.duplicated().sum()

df.describe()

df.describe(include="object")

df.describe(include="all")

plt.figure(figsize=(10,5))
sns.histplot(df['Age'])
plt.show()

# checking the distribution of 'age'
plt.figure(figsize=(10,5))
sns.histplot(df['Age'], bins=80,color='Red')
plt.show()

# checking the distribution of 'age'
plt.figure(figsize=(10,5))
sns.histplot(df['Age'], bins=8)
plt.show()

df.hist(layout=(2,4), figsize=(18,3))
plt.show()



sns.boxplot(data=df, y='Age')
plt.show()

plt.figure(figsize=(10,7))
sns.boxplot(data=df, y='Age', x='Pclass')
plt.show()

plt.figure(figsize=(10,7))
sns.boxplot(data=df, y='Age', x='Pclass', hue='Survived')
plt.show()

sns.boxenplot(data=df, y='Age')
plt.show()

plt.figure(figsize=(10,7))
sns.boxenplot(data=df, y='Age', x='Pclass')
plt.show()

plt.figure(figsize=(10,7))
sns.boxenplot(data=df, y='Age', x='Pclass', hue='Survived')
plt.show()

sns.violinplot(data=df, y='Age')
plt.show()

plt.figure(figsize=(10,7))
sns.violinplot(data=df, y='Age', x='Pclass')
plt.show()

plt.figure(figsize=(10,7))
sns.violinplot(data=df, y='Age', x='Pclass', hue='Survived', split=True)
plt.show()

sns.scatterplot(x=df['Age'], y=df['Fare'])
plt.show()

sns.scatterplot(data=df, x='Age', y='Fare', hue='Sex')
plt.show()

x=list(np.arange(100))
y1=[i+(43.17*np.random.random()) for i in x]
y2=[(57.39*np.random.random())-i for i in x]
plt.subplots(figsize=(15,5))
ax1 = plt.subplot(1,2,1)
plt.xlabel('Positively Correlated Numerical Variables')
sns.regplot(x=x,y=y1, color='green')
ax2 = plt.subplot(1,2,2)
sns.regplot(x=x,y=y2, color='tomato')
plt.xlabel('Negatively Correlated Numerical Variables')
plt.show()

sns.pairplot(df[['Age','Parch','Fare']])
plt.show()

correlation_matrix = df[['Age','Parch','Fare']].corr()
correlation_matrix

sns.heatmap(correlation_matrix, annot=True)
plt.show()

sns.scatterplot(x=df['Age'], y=df['Parch'])
plt.show()

df['Embarked'].value_counts()

sns.barplot(x=df['Embarked'].value_counts().index,
            y=df['Embarked'].value_counts().values)
plt.show()

sns.countplot(data=df, x='Embarked')
plt.show()

plt.figure(figsize=(10,7))
plt.pie(x=df['Embarked'].value_counts().values,
        labels=df['Embarked'].value_counts().index,
        autopct='%2.2f%%')
plt.show()

pd.crosstab(index=df['Survived'], columns=df['Embarked'])

# creating a facet grid with columns as survived=0 and survived=1
grid = sns.FacetGrid(data=df, col='Survived', height=4, aspect=1, sharey=False)
# mapping bar plot and the data on to the grid
grid.map(sns.countplot, 'Embarked', palette=['black', 'brown', 'orange'])
plt.show()

# creating the histogram of 'age'
plt.figure(figsize=(7,5))
sns.histplot(data=df, x='Age', bins=16, hue='Survived')
plt.show()

# visualizing a strip plot
plt.figure(figsize=(7,5))
sns.stripplot(data=df, x='Survived', y='Age')
plt.show()

plt.figure(figsize=(7,5))
sns.stripplot(data=df, x='Survived', y='Age', hue='Sex')
plt.show()

plt.figure(figsize=(7,5))
sns.swarmplot(data=df, x='Survived', y='Age')
plt.show()

plt.figure(figsize=(7,5))
sns.swarmplot(data=df, x='Survived', y='Age', hue='Sex')
plt.show()

plt.figure(figsize=(10,6))
sns.scatterplot(data=df, x='Age', y='Fare')
plt.show()

plt.figure(figsize=(10,6))
sns.scatterplot(data=df, x='Age', y='Fare', hue='Sex')
plt.show()

plt.figure(figsize=(10,6))
sns.scatterplot(data=df, x='Age', y='Fare', hue='Sex', size='Pclass')
plt.show()

plt.figure(figsize=(10,6))
sns.scatterplot(data=df, x='Age', y='Fare', hue='Sex', size='Pclass')
plt.show()

grid = sns.FacetGrid(data=df, row='Sex', col='Embarked', height=5, aspect=1, hue='Pclass')
grid.map(sns.scatterplot, 'Age', 'Fare').add_legend()
plt.show()

grid = sns.FacetGrid(data=df, col='Survived', height=4, aspect=1, sharey=False)
grid.map(sns.countplot, 'Sex', palette='inferno')
plt.show()

print("Number of females that survived: ", df[df['Survived']==1]['Sex'].value_counts().values[0])
print("Number of females that survived: ", df[df['Survived']==1]['Sex'].value_counts().values[1])

grid = sns.FacetGrid(data=df, col='Survived', height=4, aspect=1, sharey=False)
grid.map(sns.countplot, 'Pclass', palette='inferno')
plt.show()

print("Number of people who travelled in 'First Class' and survived: ", df[df['Survived']==1]['Pclass'].value_counts().values[0])
print("Number of people who travelled in 'Second Class' and survived: ", df[df['Survived']==1]['Pclass'].value_counts().values[2])
print("Number of people who travelled in 'Third Class' and survived: ", df[df['Survived']==1]['Pclass'].value_counts().values[1])

grid = sns.FacetGrid(data=df, col='Survived', height=4, aspect=1, sharey=False)
grid.map(sns.countplot, 'Embarked', palette='inferno')
plt.show()

print("Number of people boarded from Southampton and survived: ", df[df['Survived']==1]['Embarked'].value_counts().values[0])

df1 = df[df['Parch']>0]
grid = sns.FacetGrid(data=df1, col='Survived', height=4, aspect=1, sharey=False)
grid.map(sns.countplot, 'Sex', palette='inferno')
plt.show()

print("Number of males who travelled along with their parent or child and survived: ", df[df['Survived']==1][df['Parch']>0]['Sex'].value_counts().values[1])
print("Number of females who travelled along with their parent or child and survived: ", df[df['Survived']==1][df['Parch']>0]['Sex'].value_counts().values[0])

df1 = df[df['SibSp']>0]
grid = sns.FacetGrid(data=df1, row='Survived', col='Pclass', height=4, aspect=1, sharey=False)
grid.map(sns.countplot, 'Sex', palette='inferno')
plt.show()

print("Number of females from first class who travelled along with a sibling or a spouse with them and survived: ",  df[df['Survived']==1][df['SibSp']>0][df['Pclass']==1]['Sex'].value_counts()[0])

df1 = df[df['Age']<20]
grid = sns.FacetGrid(data=df1, col='Pclass', height=4, aspect=1, sharey=False)
grid.map(sns.countplot, 'Survived', palette='inferno')
plt.show()

print("Number of teenagers in the third class who failed to survive: ", df[df['Survived']==0][df['Age']<20]['Pclass'].value_counts().values[0])

df1 = df[df['Age']>30][df['Pclass']==1]
grid = sns.FacetGrid(data=df1, col='Embarked', height=4, aspect=1, sharey=False)
grid.map(sns.countplot, 'Sex', palette='inferno')
plt.show()

# Check the count of passengers after filtering
print("Count of passengers after filtering: ", df[df['Age']>30][df['Pclass']==1][df['Embarked']=='Cherbourg'].shape[0])

mean_fare = df['Fare'].mean()
df1 = df[df['Fare']>mean_fare][df['Pclass']==1]
grid = sns.FacetGrid(data=df1, col='Embarked', height=4, aspect=1, sharey=False)
grid.map(sns.countplot, 'Sex', palette='inferno')
plt.show()

print("Number of females from Southampton who paid a higher fare to travel in the first class: ", df[(df['Fare'] > mean_fare) & (df['Pclass'] == 1) & (df['Embarked'] == 'Southampton') & (df['Sex'] == 'female')].shape[0])





